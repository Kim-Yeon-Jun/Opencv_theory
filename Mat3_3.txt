크기 및 타입 변환 함수
Mat::converTo() : 행렬의 타입 변경 & 모든 원소에 일정한 값을 더하거나 곱할 수 있음.

void Mat::conertTo(OutputArray m, int rtype, double alpha=1, double beta=0) const;
m : 출력 행렬. m행렬이 적절한 크기와 타입이 아닌 경우 행렬 원소 데이터를 새로 할당.
rtype : 원하는 출력 행렬의 타입. rtype이 음수면 출력 행렬은
alpha : 추가적으로 곱할 값
beta : 추가적으로 더할 값

Mat::converTo() 함수는 언제 사용하는가?
일반적인 영상 : 각 픽셀 값을 uchar 자료형을 이용하여 표현
but 복잡한 연산을 수행해야 하는 경우, 연산의 정확도를 위해 float, double같은 실수형으로 변환하여 내부 연산 수행
이 때 Mat::converTo()로 CV_8UC1 => CV_32FC1 타입으로 변경 가능
0~1사이의 실수로 구성된 2차원 행렬 * 255 & uchar로 변환하여 그레이스케일 영상 형식으로 만든 후 imshow()로 출력 가능

예제 코드(그레이스케일로 불러온 후 uchar->float형을 사용하는 행렬 imgf로 변환)
Mat img1 = imread("lenna.bmp", IMREAD_GRAYSCALE);
Mat img1f;
img1.converTo(img1f, CV_32FC1);


Mat::reshape()함수
주어진 행렬의 크기 또는 채널 수를 변경.
Mat Mat::reshape(int cn, int rows=0) const;
cn : 새로운 채널 수, 만약 이 값이 0이면 채널 수 변경x
rows : 새로운 행의 수, 만약 이 값이 0이면 행의 개수 변경x
반환값 : 모양이 변경된 행렬을 반환
행렬의 원소 데이터를 복사하여 새로운 행렬을 만드는 것이 아니라 
하나의 행렬 원소 데이터를 같이 참조하는 행렬을 반환하는 것.(= 원본을 수정하는 것!!)

예제 코드(3x4 -> 1x12 크기의 행렬로 변환)
uchar data1[] = {1,2,3,4,5,6,7,8,9,10,11,12};
Mat mat1(3,4, CV_8UC1, data1); //3x4 행렬로 표현
Mat mat2 = mat1.reshape(0,1); // 채널수 변경x, 행의 개수를 1개로 = 1x12로 변환

cout << "mat1:\n" << mat1 << endl;
cout << "mat2:\n" << mat2 << endl;

Mat::resize() : 모양은 유지하면서 행렬의 행 크기를 변경하고 싶을 때 사용
void Mat::resize(size_t sz);
void Mat::resize(size_t sz, const Scalar& s);
sz : 새로운 행 개수 // 변경 후 행의 개수 = sz 
s : 새로 추가되는 행 원소의 초깃값

sz가 기존보다 작은 경우 : 아래쪽 행을 제거
sz가 기존보다 큰 경우 : 아래쪽에 새로운 행 추가(추가하는 행 원소의 초깃값으로 s를 지정할 수 있음)

mat1.resize(5,100);
=>5x4행렬 중 아래쪽 2개 행의 값은 모두 100으로 초기화됨.

Mat::push_back() : 이미 존재하는 행렬에 원소 데이터를 추가하고 싶은 경우
//*this 행렬의 타입과 인자로 전달된 데이터의 타입은 같아야함.
template<typename Tp› void Mat::push_back(const _Tp& elem);
template<typename Tp> void Mat::push_back(const Mat_<_Tp>& elem)；
template<typename Tp› void Mat::push_back(const std::vector<_Tp>& elem);
void Mat::push_back(const Mat& m);
elem : 행렬의 맨 마지막 행에 추가할 원소 데이터 
m : 행렬의 맨 마지막 행에 추가할 행렬, *this와 타입과 열 개수가 같아야함.

*this //
함수 인자로 _Tp& 또는 std::vector<_Tp>& 타입을 사용할 경우 : *this는 1열짜리 행렬
Mat_<_Tp>& 또는 Mat&타입을 인자로 사용하는 경우 : *this행렬과 인자로 전달된 m 행렬의 개수가 같아야함.

예제 코드(3x4크기의 행렬 mat1에 1x4크기의 행렬 mat3을 맨 마지막 행으로 추가)
Mat mat3 = Mat::ones(1, 4, CV_8UC1) * 255;
mat1.push_back(mat3);

Mat::pop_back() : 행렬에서 맨 아래에 있는 행을 제거 (Mat::push_back()과는 반대)
void Mat::pop_back(size_t nelems=1);
nelems : 제거할 행 개수. *this 행렬의 행 개수보다 크면 안됨

void MatOp7()
{
	Mat img1 = imread("lenna.bmp", IMREAD_GRAYSCALE);

	Mat img1f;
	img1.convertTo(img1f, CV_32FC1);

	uchar data1[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 };
	Mat mat1(3, 4, CV_8UC1, data1);
	Mat mat2 = mat1.reshape(0, 1);

	cout << "mat1:\n" << mat1 << endl;
	cout << "mat2:\n" << mat2 << endl;

	mat1.resize(5, 100);
	cout << "mat1:\n" << mat1 << endl;

	Mat mat3 = Mat::ones(1, 4, CV_8UC1) * 255;
	mat1.push_back(mat3);
	cout << "mat1:\n" << mat1 << endl;
}
