행렬 연산, 역행렬, 전치 행렬 등 구하는 방법

<행렬 사칙 연산을 위한 주요 연산자 재정의 함수>
MatExpr operator + (const Mat& a, const Mat& b); // 행렬+행렬
MatExpr operator + (const Mat& a, const Scalar& s); //행렬 + 스칼라
MatExpr operator + (const Scalar& s, const Mat& a); //행렬 + 스칼라 & 스칼라 값을 행렬의 각 요소에 더함
MatExpr operator - (const Mat& a, const Mat& b); // 첫번째 행렬 - 두번째 행렬
MatExpr operator - (const Mat& a, const Scalar& s); //행렬 - 스칼라
MatExpr operator - (const Scalar& s, const Mat& a); // 스칼라 - 행렬 & 행렬의 각 요소에서 스칼라 값을 뺌
MatExpr operator - (const Mat& m); // 행렬의 각 요소에 대해 단항 마이너스 연산
MatExpr operator * (const Mat& a, const Mat& b); //두개의 행렬 곱함
MatExpr operator * (const Mat& a, double s); //행렬의 각 요소에 스칼라값 곱함
MatExpr operator * (double s, const Mat& a); // 행렬의 각 요소에 스칼라값 곱함 & 스칼라 값을 행렬의 각 요소에 곱함
MatExpr operator / (const Mat& a, const Mat& b); // 첫번째 행렬을 두번째 행렬로 나눔
MatExpr operator / (const Mat& a, double s); // 행렬의 각 요소를 스칼라값으로 나눔
MatExpr operator / (double s, const Mat& a); // 스칼라 값을 행렬의 각 요소로 나눔 & 스칼라 값을 행렬의 각 요소로 나눔

s : Scalar 객체뿐만 아니라 uchar, int, float, double 같은 기본 자료형 전달
MatExpr(연산자 재정의 함수의 반환형으로 사용된 타입) : 행렬 연산을 표현하는 용도로 사용되는 행렬 표현식 클래스
    Mat 객체, Scalar 객체, int, float, double 같은 기본 자료형으로 구성된 행렬 연산을 표현함.
    복사 생성자, 대입 연산자에 의해 Mat 객체로 반환 될 수도 있음.
=>위의 연산자 재정의 함수의 실행 결과는 모두 Mat 타입의 변수에 저장할 수 있음.

Mat 클래스 행렬 연산 예제 코드
mat3 = mat1 + mat2; // mat1과 mat2 행렬 사이의 덧셈, 뺄셈 연산 수행
mat3 = mat1 - mat2;

mat3 = mat1 + s1; // mat1 행렬의  각 원소와 스칼라 값 s1 사이의 덧셈 및 뺄셈 연산 수행
mat3 = mat1 - s1;
mat3 = s1 + matl;
mat3 = s1 - matl;
mat3 = -mat1; //mat1 행렬의 각 원소에 -1을 곱함
mat3 = mat1 * mat2; //mat1과 mat2 행렬의 곱셈 연산을 수행
mat3 = mat1 * d1; //mat1 행렬의 각 원소에 실수 d1을 곱함
mat3 = d1 * mat1;

mat3 = mat1 / mat2; //mat1과 mat2 행렬의 같은 위치 원소끼리 나눗셈 연산을 수행

mat3 = mat1 / d1; //mat1 행렬의 각 원소와 실수 1끼리 나눗셈 연산을 수행
mat3 = d1 / mat1

만약 두 행렬에서 같은 위치에 이쓴 원소끼리 곱셈 연산 수행 => Mat::mul() 멤버 함수 사용
MatExpre Mat::mul(InputArray m, double scale = 1) const;
m : *this 행렬과 크기 및 타입이 같은 행렬 또는 행렬 표현식
scale : 추가적으로 곱할 값
반환값 : 두 행렬의 같은 위치 원소끼리 곱셈한 결과 행렬 표현식

역행렬 구하기 : Mat::inv()
MatExpr Mat::inv(int method=DECOMP_LU) const;
method : 역행렬 계산 방법. DECOMP_LU(deafult), DECOMP_SVD, DECOMP_EIG, DECOMP_CHOLESKY 중 하나를 지정
반환값 : 역행렬에 대한 행렬 표현식
DECOMP_SVD : 역행렬이 존재하지 않는 경우 특이값 분해를 사용하여 의사 역행렬 구할 수 있음.
DECOMP_EIG : 고윳값 분해에 의한 역행렬 계산
DECOMP_CHOLESKY : 촐레스키 분해에 의한 역행렬 계산

전치행렬(행과 열을 서로 교환 . MxN => NxM) : Mat::t()
MatExpr Mat::t() const;
반환값 : 전치 행렬에 대한 행렬 표현식

void MatOp6()
{
	float data[] = { 1, 1, 2, 3 };
	Mat mat1(2, 2, CV_32FC1, data);
	cout << "mat1:\n" << mat1 << endl; //2x2 행렬 mat1생성

	Mat mat2 = mat1.inv(); // 역행렬
	cout << "mat2:\n" << mat2 << endl;

	cout << "mat1.t():\n" << mat1.t() << endl; //전치행렬
    //연산자 재정의를 이용하여 행렬의 산술연산을 수행하고 그 결과를 출력.
	cout << "mat1 + 3:\n" << mat1 + 3 << endl;
	cout << "mat1 + mat2:\n" << mat1 + mat2 << endl;
	cout << "mat1 * mat2:\n" << mat1 * mat2 << endl;
}