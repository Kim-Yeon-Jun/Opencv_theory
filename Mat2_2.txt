행렬의 원소 값 참조 (OpenCV에서 제공하는 기능외에 사용자가 직접 알고리즘을 구현해야 하는 경우 사용)
1. Mat::at() / 2. Mat::ptr() / 3. MatIterator_

1.Mat::at()함수
행과 열을나타내는 두개의 정수를 인자로 받아 해당 위치의 행렬 원소 값을 참조하는 형식으로 반환

template<typename _Tp> _Tp& Mat::at(int y, int x)
y : 참조할 행 번호
x : 참조항 열 번호

반환값 : (_Tp& 타입으로 형 변환된)y번째 행, x번째 열의 원소 값(참조)
템플릿 함수로 정의되어 있음 -> Mat::at()함수 사용할 때 행렬 원소 자료형을 명시적으로 지정해야 함.
CV_8UC1 -> uchar / CV_32FC1 -> float / CV_8UC3(3채널 컬러영상) -> Vec3b 으로 지정

Mat 타입의 변수 img에 그레이스케일 영상이 저장되어 있을 경우 : img.at<uchar>(y,x)형태로 코드 작성.
전달된 인자의 좌표(x,y)가 행렬의 크기를 벗어나면 오류 발생.
예제 코드
Mat mat1 = Mat::zeors(3, 4, CV_8UC1);

for(int j = 0; j < mat1.rows; j++){//행렬 전체 행에 대한 반복, j는 각 행의 번호
    for(int i = 0; i < mat1.cols; i++){//j번째 행의 전체 열에 대한 반복, i는 각 열의 번호
        mat1.at<uchar>(j, i)++; //j번째 행, i번째 열의 원소를 참조하고 그 값을 1만큼 증가시킴.
    }
}
mat1 : 0으로 초기화된 3X4행렬. 각 원소는 uchar 자료형 사용
행렬 원소를 참조로 반환하기 때문에 함수의 반환값을 바꾸면 행렬 원소 값도 함께 변경됨.
표현 : mat1.at<uchar>(0,0)~mat1.at<uchar>(x,y)

2.Mat::ptr()함수
Mat 행렬에서 특정 행의 첫 번째 원소 주소를 반환.

template<typename _Tp>
_Tp* Mat::ptr(int y)
y : 참조할 행 번호
반환값 : (_Tp* 타입으로 형 변환된)y번째 행의 시작 주소

템플릿으로 정의됨. -> 행렬 원소의 자료형을 명시적으로 지정해야함
지정한 자료형의 포인터를 반환. 이 포인터를 이용하여 지정한 행의 원소에 접근할 수 있음.

예제 코드

Mat mat1 = Mat::zeors(3, 4, CV_8UC1);
//행렬의 모든 원소값을 1씩 증가시킴
for (int j = 0; j < mat1.rows; j++){//행렬 전체 행, j : 각 행의 번호
    uchar* p = mat1.ptr<uchar>(j);
    for(int i = 0; i < mat1.cols; i++){
        p[i]++;
    }
}
mat1.ptr<uchar>(j);//j번째 행 원소의 시작 주소를 반환, 
이 주소를 포인터형 변소 p에 저장하면 이후 p를 1차원 배열처럼 사용하여 해당 행의 원소에 접근 할 수 있음

j번째 행의 0번째 열 원소는 p[0]이고, 1번째 열 원소는 p[1].
j번째 행의 맨 마지막 열에 해당하는 원소는 p[mat1.cols-1]로 접근 가능. // 행렬의 가로 크기를 벗어나지 않도록 주의
0번째 행의 i번째 원소 : *(p+i) 또는 p[i]로 접근 가능.
해당 방식은 행 단위로 행렬 원소를 참조하는 경우에 유용함.
Mat::at()은 임의 좌표 원소에 빈번하게 접근해야 하는 경우에 편리함.

3.MatIterator_ 반복자 사용 방법(위의 함수들이 범위를 벗어난 경우 발생하는 오류 개선 - 반복자)
Mat 행렬 원소 참조를 위한 반복자 변수를 만들어서 행렬 크기에 상관없이 행렬 전체 원소를 차례대로 참조하는 방식.
템플릿으로 정의된 클래스 : Mat 행렬 타입에 맞는 자료형을 명시하여 사용
Mat::begin() -> 행렬의 첫 번째 원소 위치를 얻음. 
Mat::end() -> 마지막 원소 바로 다음 위치를 얻음.
예제 코드
Mat mat1 = Mat::zeros(3, 4, CV_8UC1);
//반복자를 사용하여 mat1 행렬의 모든 원소 값을 1씩 증가시킴
for (MatIterator_<uchar> it = mat1.begin<uchar>(); it != mat1.end<uchar>(); ++it){
    (*it)++;
}
(*it) : 반복자 변수 it가 가리키는 원소 값 참조를 위해 사용
가로,세로 크기를 참조하는 코드X : 반복자를 사용하면 행렬의 가로,세로를 크기에 상관없이 행렬의 모든 원소를 안전하게 방문 가능
Mat::ptr 보다 동작속도가 느림, Mat::at 같은 임의의 위치에 자유롭게 방문 불가. => 사용성이 높지는 않음

행렬의 원소 값 참조 방법을 이용하여 원소 값 증가시키기
void MatOp4()
{
	Mat mat1 = Mat::zeros(3, 4, CV_8UC1);

	for (int j = 0; j < mat1.rows; j++) {
		for (int i = 0; i < mat1.cols; i++) {
			mat1.at<uchar>(j, i)++;
		}
	}

	for (int j = 0; j < mat1.rows; j++) {
		uchar* p = mat1.ptr<uchar>(j);
		for (int i = 0; i < mat1.cols; i++) {
			p[i]++;
		}
	}

	for (MatIterator_<uchar> it = mat1.begin<uchar>(); it != mat1.end<uchar>(); ++it) {
		(*it)++;
	}

	cout << "mat1:\n" << mat1 << endl;
}

