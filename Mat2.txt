#행렬의 복사
Mat img1 = imread("dog.bmp");

Mat img2 = img1; //복사 생성자(img1에 저장된 영상 혹은 행렬 복사)_얕은 복사

Mat img3;
img3 = img1; //대입 연산자_얕은 복사

복사본 생성시 픽셀데이터를 공유하는 것이 아니라 메모리 공간을 새로 할당하여 
픽셀 데이터 전체를 복사하고 싶은 경우
Mat::clone()함수 또는 Mat::copyTo() 함수 사용
1.Mat Mat::clone() const;
    반환값 : *this 행렬의 복사본
2.void Mat::copyTo(OutputArray m) const;
  void Mat::copyTo(OutputArray m, InputArray mask) const;
    m : 복사본이 저장될 행렬 *this 행렬과 크기나 타입이 다른 경우에는 
        메모리를 새로 할당하고 픽셀값을 복사함
    mask : 마스크 행렬, 마스크 행렬의 원소 값이 0이 아닌 좌표에서만 행렬 원소를 복사한다
    마스크 행렬은 원본 이미지와 동일한 크기를 가지며, 각 원소는 0 또는 다른 값을 가짐
    원본 이미지와 목표 이미지 간의 일부 픽셀을 선택적으로 복사하고자 할 때 유용함
Mat::clone() : 자기 자신과 동일한 Mat 객체를 완전히 새로 만들어 반환.
Mat::copyTo() : 인자로 전달된 m행렬에 자기 자신을 복사.(크기와 타입이 같은 경우)
                함수 내부에서 행렬 m을 새로 생성한 후 픽셀 값 복사(크기나 타입이 다른 경우)

Mat img4 = img1.clone(); //깊은 복사

Mat img5;
img1.copyTo(img5); // 깊은 복사
img4, img5 둘 다 픽셀 데이터를 저장할 메모리 공간을 따로 가지고 있음.

깊은 복사 : 완전히 메모리 공간을 새로 할당하여 픽셀 값을 복사하는 형태의 복사.

예제 코드
void MatOp2(){
    Mat img1 = imread("dog.bmp"); // 강아지 영상을 img1에 저장

    //복사 생성자와 대입연산자를 이용해 img1의 복사본 img2, img3을 얕은 복사로 생성
    Mat img2 = img1; 
    Mat img3;
    img3 = img1;

    //img1의 복사본 img4, img5를 깊은 복사로 생성
    Mat img4 = img1.clone();
    Mat img5;
    img1.copyTo(img5);

    //img1 영상의 모든 픽셀 값을 노란색으로 설정
    img1.setTo(Scalar(0,255,255)); //yellow

    //img1 ~ img5의 영상을 모두 출력
    imshow("img1",img1);
    imshow("img2",img2);
    imshow("img3",img3);
    imshow("img4",img4);
    imshow("img5",img5);

    waitKey();
    destroyAllWindows();
}
