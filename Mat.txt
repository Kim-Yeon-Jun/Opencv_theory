class Mat
{
public:
    Mat();
    Mat(int rows, int cols, int type);
    Mat(Size size, int type);
    Mat(int rows, int cols, int type, const Scalar& s);
    Mat(Size size, int type, const Scalar& s);
    Mat(const Mat& m);
    ~Mat();
    //Mat 클래스의 다양한 생성자와 소멸자


    void create(int rows, int cols, int type);
    bool empty() const;

    Mat clone() const;
    void coptyTo(OutputArray m) const;
    Mat& setTo(InputArray value, InputArray mask=noArray());
    
    static MatExpr zeros(int rows, int cols, int type);
    static MatExpr ones(int rows, int cols, int type);
    
    Mat& operator = (const Mat& m);
    Mat operator() (const Rect& roi) const;
        
    template<typename _Tp> _Tp* ptr(int i0 = 0);
    template<typename _Tp> _Tp& at(int row, int col);
    //Mat 클래스의 멤버 함수. 연산자 재정의 함수, 정적 멤버 함수 포함됨


    int dims; //Mat 행렬의 차원 (영상 - 2)
    int rows, cols; // 2차원 행렬의 크기 (row : 세로, col : 가로) 3차원에서는 둘다 -1. 2차원에서만 의미 있음
    uchar* data; // 행렬의 원소 데이터가 저장되어있는 메모리 공간을 가리키는 포인터형 멤버 변수
    MatSize size;
    //Mat 클래스의 주요 멤버 변수

};


//행렬의 생성과 초기화
Mat img1;  //  비어있는 행렬
Mat::Mat(int rows, intr cols, int type); //세로, 가로, CV타입
rows : 새로 만들 행렬의 행 개수(영상의 세로 크기)
cols : 새로 만들 행렬의 열 개수 (영상의 가로 크기)
type : 새로 만들 행렬의 타입

Mat img2(480, 640, CV_8UC1); // unsigned char, 1-channel // 그레이스케일
Mat img3(480, 640, CV_8UC3); // unsigned char, 3-channel // 트루컬러

행렬의 크기 지정시 Size 클래스 사용
Mat::Mat(Size size, int type);
size : 새로 만들 행렬의 크기.Size(cols, rows) 또는 Size(width, height) // 가로 세로 순서
type : 새로 만들 행렬의 타입

Mat img4(Size(640, 480), CV_8UC3); //

행렬의 크기와 타입을 지정하여 Mat객체를 생성하면 행렬의 모든 원소는 쓰레기값이 채워지게 됨
=> 생성하면서 특정 값으로 모든 원소를 초기화해주는 것이 좋음.

Mat::Mat(int rows, int cols, int type, const Scalar& s);
Mat::Mat(Size size, int type, const Scalar& s);
rows : 새로 만들 행렬의 행 개수(영상의 세로 크기)
cols : 새로 만들 행렬의 열 개수(영상의 가로 크기)
size : 새로 만들 행렬의 크기
type : 새로 만들 행렬의 타입
s : 행렬 원소 초깃값
Scalar : 4개의 실수 값을 저장할 수 있는 OpenCV 클래스. 주로 영상의 픽셀값 표현에 사용

모든 픽셀값이 128로 초기화된 그레이스케일
Mat img5(480, 640, CV_8CU1, Scalar(128));
모든 픽셀이 빨간색으로 설정된 컬러영상
Mat img6(480, 640, CV_8UC3, Scalar(0, 0, 255)); (B, G, R)순으로 컬러 채널을 의미

보통 0으로 초기화하는 경우가 많음(Scalar(0)) 
이에 대한 함수가 존재 : Mat::zeros()

static MatExpr Mat::zeros(int rows, int cols, int type);
static MatExpr Mat::zeros(Size size, int type);
rows, cols, size, type...
반환값 : 모든 원소가 0으로 초기화된 행렬 표현식
+정적 멤버 함수이기 때문에 실제 코드에서 사용시 Mat::를 붙여서 사용해야함

Mat mat1 = Mat::zeors(3, 3, CV_32SC1); // 0으로 초기화된 3x3 정수형 행렬  생성

Mat::ones()  : 모든 원소를 1로 초기화된 행렬 생성
static MatExpr Mat::ones(int rows, int cols, int type);
static MatExpr Mat::ones(Size size, int type);

Mat::eye() : 단위 행렬 생성
static MatExpr Mat::eye(int rows, int cols, int type);
static MatExpr Mat::eye(Size size, int type);

Mat mat2 = Mat::ones(3, 3, CV_32FC1);
Mat mat3 = Mat::eye(3, 3, CV_32FC1);

Mat 객체를 생성할 때 이미 할당된 메모리 공간의 데이터를 사용할 수 있음.
외부 메모리 공간을 이용하여 객체 생성 = 자체적인 메모리 할당을 수행하지 않고 외부 메모리 참조. : 객체 생성이 빠름
Mat::Mat(int rows, int cols, int type, void* data, size_t step=AUTO_STEP);
Mat::Mat(Size size, int type, void* data, size_t step=AUTO_STEP);
data : 사용할 (외부)행렬 데이터의 주소. 외부 데이터를 사용하여 Mat 객체를 생성할 때에는 생성자에서 원소 데이터 저장을 위한 메모리 공간을 동적으로 할당받지X
step : (외부)행렬 데이터에서 한 행이 차지하는 바이트 수. 만약 외부 행렬 데이터의 각 행에 여분의 패딩 바이트가 존재하면 명시적으로 지정해야함.
        AUTO_STEP은 패딩 바이트가 없다고 간주하는 default 값

외부 메모리 공간의 주소를 지정하는 Mat 클래스의 생성자를 이용한 행렬 생성
float data[] = {1, 2, 3, 4, 5, 6}; // 외부 배열의 값.
Mat mat4(2, 3, CV_32FC1, data); // 외부 배열의 크기와 행렬의 원소 갯수가 같아야함//채우지는 기준은 행
생성 후 외부 메모리의 값과 mat4 행렬의 값은 서로 영향을 받음.

사용자가 지정한 원소 값을 이용하여 Mat 객체를 생성하는 방법 중 1 : Mat_ 클래스
Mat 클래스를 상속하여 만든 템플릿 클래스. Mat_와 Mat 는 상호 변환이 가능함.
Mat_ : << 연산자와, (,)콤마를 이용하여 간단하게 행렬 원소 값을 설정하는 인터페이스 제공
Mat_ 객체 생성 - << 연산자로 행렬 원소 지정 - Mat 객체로 변환

Mat_<float> mat5_(2, 3); //저장할 원소의 자료형을 명시적으로 지정해야 함
mat5_ << 1, 2, 3, 4, 5, 6;
Mat mat5 = mat_5; //mat5_행렬을 복사하여 Mat 클래스 타입의 변수 mat5 선언. 2x3크기 , 타입은 CV_32FC1, mat5_행렬과 원소를 공유함.

Mat mat5 = (Mat_<float>(2, 3) << 1, 2, 3, 4, 5, 6); //mat5_ 변수 사용하지 않을 때 간략한 코드

초기화 리스트(initializer list)를 이용한 행렬 초기화 방법
추천 : Mat_ 클래스 형식으로 생성한 후 Mat 타입으로 변환(생성된 Mat 객체의 타입을 명시적으로 지정하기 위해)
Mat mat6 = Mat_<float>({2, 3}, {1, 2, 3, 4, 5, 6});

Mat::create()멤버 함수 : 비어있는 Mat 객체 또는 이미 생성된 Mat 객체에 새로운 행렬을 할당/새로 만드는 행렬의 원소 값을 초기화하는 기능은 없음

void Mat::create(int rows, int cols, int type);
void Mat::create(Size size, int type);
함수의 인자로 지정한 행렬 크기와 타입이 기존 행렬과 모두 같으면 함수 동작x 종료
다른 경우 : 기존 메모리 공간 해제 - 새로운 행렬 데이터 저장을 위한 메모리 공간 할당

mat4, mat5에 새로운 크기와 타이의 행렬 할당 예시

mat4.create(256, 256, CV_8UC3); // 256x256, uchar, 3-channels
mat5.create(4, 4, CV_32FC1); // 4x4, float, 1-channel

create로 생성후 행렬 전체 원소 값을 초기화 : = 연산자 재정의 또는 Mat::setTo() 멤버함수 이용

Mat& Mat::operator = (const Scalar& s);
s : 행렬 원소에 설정할 값
반환값 : 값이 설정된 Mat 객체의 참조

Mat& Mat::setTo(InputArray value, InputArray mask = noArray());
value : 행렬 원소에 설정할 값
mask : 마스크 행렬. 마스크 행렬의 원소가 0이 아닌 위치에서만 value 값이 설정됨. 
        행렬 전체 원소 값을 설정하려면 noArray() 또는 Mat()을 지정함.
반환값 : Mat 객체의 참조

mat4 = Scalar(255, 0, 0); // 파란색에 해당하는 값으로 설정.
mat5.setTo(1.f); // 행렬의 모든 값을 1.f로 설정


