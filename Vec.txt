Vec 클래스 : 작은 개수의 원소로 구성된 벡터를 표현하는 템플릿 클래스
(Vec3b, Vec4i, Vec2f 등으로 재정의하여 사용)
Scalar 클래스 : Vec클래스의 특별한 형태

<Vec 클래스>
벡터 : 같은 자료형을 가진 원소 몇 개로 구성된 데이터 형식

//작은 크기의 행렬을 표현하는 Matx 클래스 정의. 행렬 원소는 val 멤버 변수 배열에 저장됨(_Tp : 행렬 원소 자료형. m,n : 행과 열 개수)
template<typename _Tp, int m, int n> class Matx
{
    public:
        ...
        _Tp val[m*n]; //<matrix elements
};

// 작은 크기의 벡터를 표현하는 Vec 클래스 정의. Matx 클래스를 상속받아 만들어짐. cn개의 원소를 갖는 val 배열을 멤버 변수로 가짐
// 열 개수가 1개로 특화된 벡터 표현 클래스.
template<typename _Tp, int cn> class Vec : public Matx<_Tp, cn, 1>
{
    public:
        ...
        /*! element access*/
        _Tp& operator[](int i); //Vec 클래스의 멤버 변수 배열 val에 접근할 수 있는 []연산자 재정의
};
//C++ 표준 출력 스트림을 이용하여 벡터 원소를 출력하는 연산자 재정의
template<typename _Tp, int n> static inline;
std::ostream& operator << (std::ostream& out, const Vec<_Tp, n>& vec);

Vec<int, 4> : 정수형 데이터 4개를 가지고 있는 벡터
Vec<uchar, 3> : uchar 자료형 3개를 가지고 있는 벡터
Vec<char, 3> : 3채널 컬러 영상의 픽셀 값을 표현하는 용도로 자주 사용

//변수 p1, p2 선언
Vec<uchar, 3>p1, p2(0, 0, 255);

//OpenCV에서 제공하는 Vec 클래스 템플릿의 이름 재정의 예시
Vec<num-of-data>{b|s|w|i|f|d}
num-of-data : 2,3,4 등 작은 숫자 지정
{b|s|w|i|f|d} : 문자들 중 하나를 지정.
b : uchar(unsigned char)
s : short
w : unshort(unsigned short)
i : int
f : float
d : double

//실제 OpenCV 라이브러리 내 Vec 클래스의 이름 재정의
typedef Vec<uchar, 2> Vec2b; 
typedef Vec<uchar, 3> Vec3b; 
typedef Vec<uchar, 4> Vec4b;

typedef Vec<short, 2> Vec2s;
typedef Vec<short, 3> Vec3s; 
typedef Vec<short, 4> Vec4s;

typedef Vec<ushort, 2> Vec2w; 
typedef Vec<ushort, 3> Vec3w; 
typedef Vec<ushort, 4> Vec4w;

typedef Vec<int, 2> Vec2i; 
typedef Vec<int, 3> Vec3i; 
typedef Vec<int, 4> Vec41; 
typedef Vec<int, 6> Vec6i; 
typedef Vec<int, 8› Vec8i;

typedef Vec<float, 2> Vec2f; 
typedef Vec<float, 3> Vec3f; 
typedef Vec<float, 4> Vec4f; 
typedef Vec<float, 6> Vec6f;

typedef Vec<double, 2> Vec2d; 
typedef Vec<double, 3> Vec3d; 
typedef Vec<double, 4> Vec4d; 
typedef Vec<double, 6> Vecodi

//ex. 컬러 영상의 픽셀 값 표현
Vec<uchar, 3> 형식 대신에 Vec3b 클래스 사용가능!
Vec3b p1, p2(0, 0, 255);
p1.val 배열 원소가 모두 0으로 초기화됨
p2.val 배열 : p2.val[0] : 0, p2.val[1] : 0, p2.val[2] : 255 로 초기화됨

p1.val[0] = 100; 으로 배열의 원소 변경 가능

Vec클래스 : []연산자가 재정의 되어 있음 - 이를 이용하여 멤버 변수 val 배열에 쉽게 접근이 가능하다.

template<typename _Tp, int cn> inline
_Tp& Vec<_Tp, cn>::operator [](int i)
{
    CV_DbgAssert( (unsigned)i < (unsigned)cn ); //CV_DbgAssert() 매크로 함수는 디버그 모드에서만 동작하는 예외 처리 코드. 릴리스 모드에서는 무시됨.
    return this->val[i];
}

벡터의 원소 출력
cout << "p1: " << p1 << endl;
cout << "p2: " << p2 << endl;
출력값 : 
p1 : [100, 0, 0]
p2 : [0, 0, 255]

